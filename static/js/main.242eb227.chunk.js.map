{"version":3,"sources":["api/colors.js","api/index.js","components/ColorBox/index.js","components/ColorChoices/index.js","components/ColorWidget/index.js","App.js","reportWebVitals.js","index.js"],"names":["COLOR_LIST","fetchColors","Promise","resolve","reject","Math","floor","random","timeOut","setTimeout","data","colorChoices","_sliceColors","bar","start","end","idxOne","length","idxTwo","slice","ColorBox","props","className","style","backgroundColor","String","pickedColor","ColorChoices","useState","currColor","setColorState","colorList","renderColorSelectors","map","color","onClick","handleClick","tabIndex","ColorWidget","colorsArray","respDataString","colors","setColors","then","res","catch","err","console","log","JSON","stringify","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAAaA,G,MAAa,CACtB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YCXSC,EAAc,IAAIC,SAAQ,SAACC,EAASC,GAEhD,GAAwB,IADAC,KAAKC,MAAsB,GAAhBD,KAAKE,UAEvCH,EAAO,WACD,CACN,IAAMI,EAA0B,IAAhBH,KAAKE,SACrBE,YAAW,WACVN,EAAQ,CACPO,KAAM,CACLC,aAAcC,IACdC,IAAK,eAGLL,OAICI,EAAe,WAEpB,IAOIE,EACAC,EARAC,EAASX,KAAKC,MAAMD,KAAKE,SAAWP,EAAWiB,QAC/CC,EAASb,KAAKC,MAAMD,KAAKE,SAAWP,EAAWiB,QAiBnD,OAfID,IAAWE,IACdA,GAAU,GAMPF,EAASE,GACZJ,EAAQE,EACRD,EAAMG,IAENH,EAAMC,EACLF,EAAQI,GAGHlB,EAAWmB,MAAML,EAAMC,I,eCnChBK,EANE,SAACC,GACjB,OACC,qBAAKC,UAAU,WAAWC,MAAO,CAACC,gBAAiBC,OAAOJ,EAAMK,iBC+BnDC,G,MAhCM,SAACN,GAAW,IAAD,EAEIO,mBAAS,WAFb,mBAExBC,EAFwB,KAEbC,EAFa,KAGzBnB,EAAeU,EAAMU,UAUrBC,EAAuBrB,EAAasB,KACzC,SAACC,GAAD,OACC,qBAECZ,UAAU,iBACVa,QAAU,kBAVO,SAACD,GACpBJ,EAAcI,GASIE,CAAYX,OAAOS,KACnCX,MAAQ,CAACC,gBAAiBC,OAAOS,IACjCG,SAAS,KAJJH,MAQR,OACC,sBAAKZ,UAAU,eAAf,UACC,cAAC,EAAD,CAAUI,YAAaD,OAAOI,KAC7BG,OCwBWM,EApDK,WAAM,IAiBlBC,EACAC,EAlBkB,EAGQZ,mBAAS,MAHjB,mBAGda,EAHc,KAGNC,EAHM,KAuBtB,GAlBIzC,EACC0C,MAAK,SAACC,GACCF,EAAUE,MAEjBC,OACG,SAACC,GAEGC,QAAQC,IADF,oFAYdP,EACAF,EAAcE,EAAO/B,KAAKC,aAC1B6B,EAAiBS,KAAKC,UAAUT,OAC5B,CAEJF,EADyB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAEjFC,EAAiB,6IAKrB,OACI,sBAAKlB,UAAU,eAAf,UACI,qBAAKA,UAAU,qBAAf,SACI,qDACuB,uBADvB,4BAKJ,cAAC,EAAD,CAAcS,UAAWQ,IACzB,uBACA,sBAAKjB,UAAU,2BAAf,UACI,mDAAqB,0BACpBkB,SCjDFW,MANf,WACE,OACI,cAAC,EAAD,KCQSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.242eb227.chunk.js","sourcesContent":["export const COLOR_LIST = [\n    \"#D7CEE4\",\n    \"#CFB4F7\",\n    \"#6221EA\",\n    \"#0725E8\",\n    \"#B6BFF6\",\n    \"#FEBECD\",\n    \"#FBC02D\",\n    \"#109CF1\",\n    \"#FF2455\",\n    \"#FF8A00\",\n    \"#8F40EB\",\n    \"#AF5EEC\",\n    \"#CA7DEF\",\n    \"#DF9CF3\",\n    \"#F1BCF8\",\n    \"#FFDCFF\",\n    \"#FBC4ED\",\n    \"#F8ABD6\",\n    \"#F591BC\",\n    \"#F1779E\",\n    \"#E95D7E\",\n    \"#DE425B\",\n    \"#FF005B\",\n    \"#FF533B\",\n    \"#FF811D\",\n    \"#FFA600\",\n]\n","/* \nYou don't need to edit this file.\n\nfetchColors is a \"fake\" API, for the purpose of this code exercise.\n\nIt is a Promise which:\n\n- has a 90% chance of resolving to a payload that contains\na random list of colors, with a randomized delay of 0 to 5 seconds.\n\n- has a 10% chance of \"timing out\" and rejecting.\n*/\n\nimport { COLOR_LIST } from './colors';\n\nexport const fetchColors = new Promise((resolve, reject) => {\n\tconst timeoutDiceRoll = Math.floor(Math.random() * 10);\n\tif (timeoutDiceRoll === 1) {\n\t\treject('foo');\n\t} else {\n\t\tconst timeOut = Math.random() * 5000;\n\t\tsetTimeout(() => {\n\t\t\tresolve({\n\t\t\t\tdata: {\n\t\t\t\t\tcolorChoices: _sliceColors(),\n\t\t\t\t\tbar: \"bin baz\"\n\t\t\t\t}}\n\t\t\t\t)\n\t\t}, timeOut);\t\n\t}\n});\n\nconst _sliceColors = () => {\n\t\n\tlet idxOne = Math.floor(Math.random() * COLOR_LIST.length);\n\tlet idxTwo = Math.floor(Math.random() * COLOR_LIST.length);\n\n\tif (idxOne === idxTwo) {\n\t\tidxTwo += 1;\n\t}\n\n\tlet start;\n\tlet end;\n\n\tif (idxOne < idxTwo) {\n\t\tstart = idxOne;\n\t\tend = idxTwo;\n\t} else {\n\t\tend = idxOne;\n\t \tstart = idxTwo;\n\t}\n\n\treturn COLOR_LIST.slice(start,end);\n}\n","import React from 'react';\nimport './index.css';\n\n/**\n * Solution to the Diversio FE Exercise\n * Color Picker Widget\n * Solution @author Atharva Shivankar <ads8046@g.rit.edu>\n * Date completed: July 7, 2022 \n */\n\n// ColorBox component renders a large \"box\" div element that highlights the user's picked color\nconst ColorBox = (props) => {\n\treturn (\n\t\t<div className=\"colorBox\" style={{backgroundColor: String(props.pickedColor)}}/>\n\t);\n}\n\nexport default ColorBox;\n","import React, {useState} from 'react';\nimport ColorBox from '../ColorBox';\nimport './index.css';\n\n/**\n * Solution to the Diversio FE Exercise\n * Color Picker Widget\n * Solution @author Atharva Shivankar <ads8046@g.rit.edu>\n * Date completed: July 7, 2022 \n */\n\n// This component renders small boxes of available color choices for the user \nconst ColorChoices = (props) => {\n\t\n\tconst [currColor, setColorState] = useState(\"#808080\");\n\tconst colorChoices = props.colorList;\n\n\t// function to handle the state when the user clicks a choice div element\n\t// the function sets the current state to the user's chosen color and this\n\t// new current state is passed as a prop to the ColorBox component to update it.  \n\tconst handleClick = (color) => {\n\t\tsetColorState(color);\n\t};\n\n\t// populates div elements with the colors which the user can choose from by clicking.\n\tconst renderColorSelectors = colorChoices.map( \n\t\t(color) =>\n\t\t\t<div\n\t\t\t\tkey={color} \n\t\t\t\tclassName=\"colorChoiceBox\"\n\t\t\t\tonClick={ () => handleClick(String(color)) }\n\t\t\t\tstyle={ {backgroundColor: String(color)} }\n\t\t\t\ttabIndex=\"0\"\n\t\t\t/>\n\t);\n\t\n\treturn (\n\t\t<div className=\"colorChoices\">\n\t\t\t<ColorBox pickedColor={String(currColor)}/>\n\t\t\t{renderColorSelectors}\n\t\t</div>\n\t);\n}\n\nexport default ColorChoices;\n","import React, { useState } from 'react';\nimport './index.css';\nimport { fetchColors } from '../../api';\nimport ColorChoices from '../ColorChoices';\n\n/**\n * Solution to the Diversio FE Exercise\n * Color Picker Widget\n * Solution @author Atharva Shivankar <ads8046@g.rit.edu>\n * Date completed: July 7, 2022 \n */\nconst ColorWidget = () => {\n    \n    // START OF DATA FETCHING CODE\n    const [ colors, setColors ] = useState(null);\n\n        fetchColors\n        .then((res) => {\n                setColors(res);\n        })\n        .catch(\n            (err) => {\n                err = \"500: Internal Server Error (would raise an actual status code for a real API)\"\n                console.log(err);\n            }\n        )\n    // END OF DATA FETCHING CODE\n\n    let colorsArray;\n    let respDataString;\n\n    // If the API call is unsuccessful, return a standard set of primary and secondary colors\n    // to enable the user to continue using the widget with limited functionality\n    // and log the error code (like with an actual API).\n    if (colors) {\n        colorsArray = colors.data.colorChoices;\n        respDataString = JSON.stringify(colors);\n    }  else {\n        const defaultColorsArr = [\"#FF0000\", \"#FFFF00\", \"#0000FF\", \"#FFA500\", \"#8F00FF\", \"#00FF00\"];\n        colorsArray = defaultColorsArr;\n        respDataString = \"Unable to fetch data from the API. \" + \n                        \"Here are default primary and secondary colors. \" +\n                        \"Retrying... Please check the console for the error code.\";\n    };\n\n    return (\n        <div className=\"color-widget\">\n            <div className=\"color-widget-title\">\n                <h2>\n                    Color Picker Widget<br/> \n                    Please Pick a Color!\n                </h2>\n            </div>\n            <ColorChoices colorList={colorsArray}/>\n            <br/> \n            <div className=\"payload-string-container\">\n                <h4>Mock API Payload:<br/></h4> \n                {respDataString}\n            </div>\n        </div> \n    );\n}\n\nexport default ColorWidget;\n","import ColorWidget from './components/ColorWidget';\n\nfunction App() {\n  return (\n      <ColorWidget/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}